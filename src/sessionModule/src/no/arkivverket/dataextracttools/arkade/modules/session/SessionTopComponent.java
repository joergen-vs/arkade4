/*
 * The National Archives of Norway - 2014
 */
package no.arkivverket.dataextracttools.arkade.modules.session;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import no.arkivverket.dataextracttools.utils.logging.LogListener;
import no.arkivverket.dataextracttools.utils.logging.LogRecordCreatedEvent;
import no.arkivverket.dataextracttools.utils.logging.LogRecordHandler;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.IOColorLines;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;
import org.openide.windows.TopComponent;

/**
 * Top component displaying the gui for a session.
 *
 * @version 0.12 2014-02-28
 * @author Riksarkivet
 *
 */
@ConvertAsProperties(
        dtd = "-//no.arkivverket.dataextacttools.arkade.modules.session//Session//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "SessionTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
//@ActionID(category = "Window", id = "no.arkivverket.dataextacttools.arkade.modules.session.SessionTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SessionAction",
        preferredID = "SessionTopComponent")
@Messages({
    "CTL_SessionAction=Session",
    "CTL_SessionTopComponent=Session Window",
    "HINT_SessionTopComponent=This is a Session window"
})
public class SessionTopComponent extends TopComponent
        implements LogListener {

    public static final Object[] YES_NO_OPTIONS = new Object[]{
        NbBundle.getMessage(SessionTopComponent.class, "CTL_Yes"),
        NbBundle.getMessage(SessionTopComponent.class, "CTL_No")
    };
    private static final int MAX_NUMBER_OF_RESULTS = 100;
    private Logger logger;
    private Session session;
    private boolean runningSession; // Is the session running?
    private String defaultDirectory = ".";
    private File datasetDescriptionFile;

    public SessionTopComponent() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        dataDirectoryTextField = new javax.swing.JTextField();
        dataDirectoryLabel = new javax.swing.JLabel();
        datasetDescriptionFileTextField = new javax.swing.JTextField();
        datasetDescriptionFileLabel = new javax.swing.JLabel();
        chooseDataDirectoryButton = new javax.swing.JButton();
        chooseDatasetDescriptionFileButton = new javax.swing.JButton();
        outputDirectoryTextField = new javax.swing.JTextField();
        outputDirectoryLabel = new javax.swing.JLabel();
        chooseOutputDirectoryButton = new javax.swing.JButton();
        startSessionButton = new javax.swing.JButton();
        sessionCreatorLabel = new javax.swing.JLabel();
        sessionCreatorTextField = new javax.swing.JTextField();
        settingsTabbedPane = new javax.swing.JTabbedPane();
        flatFileSettingsPanel = new no.arkivverket.dataextracttools.arkade.modules.session.FlatFileSettingsPanel();
        maxNumberOfResultsLabel = new javax.swing.JLabel();
        maxNumberOfResultsTextField = new javax.swing.JTextField();
        maxNumberOfResultsTextField.setText(Integer.toString(MAX_NUMBER_OF_RESULTS));
        maxNumberOfResultsTextField.addKeyListener(new NumericalInput());
        debugSessionProcessingCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        dataDirectoryTextField.setEditable(false);
        dataDirectoryTextField.setText(org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.dataDirectoryTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(dataDirectoryLabel, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.dataDirectoryLabel.text")); // NOI18N

        datasetDescriptionFileTextField.setEditable(false);
        datasetDescriptionFileTextField.setText(org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.datasetDescriptionFileTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(datasetDescriptionFileLabel, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.datasetDescriptionFileLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chooseDataDirectoryButton, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.chooseDataDirectoryButton.text")); // NOI18N
        chooseDataDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDataDirectoryButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chooseDatasetDescriptionFileButton, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.chooseDatasetDescriptionFileButton.text")); // NOI18N
        chooseDatasetDescriptionFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDatasetDescriptionFileButtonActionPerformed(evt);
            }
        });

        outputDirectoryTextField.setEditable(false);
        outputDirectoryTextField.setText(org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.outputDirectoryTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(outputDirectoryLabel, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.outputDirectoryLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chooseOutputDirectoryButton, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.chooseOutputDirectoryButton.text")); // NOI18N
        chooseOutputDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseOutputDirectoryButtonActionPerformed(evt);
            }
        });

        startSessionButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(startSessionButton, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.startSessionButton.text")); // NOI18N
        startSessionButton.setEnabled(false);
        startSessionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSessionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(sessionCreatorLabel, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.sessionCreatorLabel.text")); // NOI18N

        sessionCreatorTextField.setText(org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.sessionCreatorTextField.text")); // NOI18N

        flatFileSettingsPanel.setName("flatFileSettings"); // NOI18N
        settingsTabbedPane.addTab(org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.flatFileSettings.TabConstraints.tabTitle"), flatFileSettingsPanel); // NOI18N

        maxNumberOfResultsLabel.setLabelFor(maxNumberOfResultsTextField);
        org.openide.awt.Mnemonics.setLocalizedText(maxNumberOfResultsLabel, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.maxNumberOfResultsLabel.text") + ":"); // NOI18N

        maxNumberOfResultsTextField.setText(org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.maxNumberOfResultsTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(debugSessionProcessingCheckBox, org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.debugSessionProcessingCheckBox.text")); // NOI18N
        debugSessionProcessingCheckBox.setSelected("true".equals(System.getProperty("arkade.session.debug", "false")));
        debugSessionProcessingCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                debugSessionProcessingCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dataDirectoryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dataDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseDataDirectoryButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(datasetDescriptionFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sessionCreatorTextField)
                            .addComponent(datasetDescriptionFileTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseDatasetDescriptionFileButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputDirectoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startSessionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sessionCreatorLabel)
                            .addComponent(maxNumberOfResultsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(settingsTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(debugSessionProcessingCheckBox))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(maxNumberOfResultsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(outputDirectoryTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chooseOutputDirectoryButton)))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dataDirectoryLabel, datasetDescriptionFileLabel, maxNumberOfResultsLabel, outputDirectoryLabel, sessionCreatorLabel});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sessionCreatorLabel)
                    .addComponent(sessionCreatorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datasetDescriptionFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datasetDescriptionFileLabel)
                    .addComponent(chooseDatasetDescriptionFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataDirectoryLabel)
                    .addComponent(chooseDataDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputDirectoryLabel)
                    .addComponent(chooseOutputDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxNumberOfResultsLabel)
                            .addComponent(maxNumberOfResultsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 254, Short.MAX_VALUE)
                                .addComponent(startSessionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(settingsTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(debugSessionProcessingCheckBox)))
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void chooseDatasetDescriptionFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDatasetDescriptionFileButtonActionPerformed
        chooseDatasetDescriptionFile();
    }//GEN-LAST:event_chooseDatasetDescriptionFileButtonActionPerformed

    private void chooseDataDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDataDirectoryButtonActionPerformed
        chooseDataDirectory();
    }//GEN-LAST:event_chooseDataDirectoryButtonActionPerformed

    private void chooseOutputDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseOutputDirectoryButtonActionPerformed
        chooseOutputDirectory();
    }//GEN-LAST:event_chooseOutputDirectoryButtonActionPerformed

    private void startSessionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSessionButtonActionPerformed
        startSessionButton.setText("Kjører...");
        startSessionButton.setEnabled(false);
        sessionCreatorTextField.setEditable(false);
        chooseDatasetDescriptionFileButton.setEnabled(false);
        chooseDataDirectoryButton.setEnabled(false);
        chooseOutputDirectoryButton.setEnabled(false);
        maxNumberOfResultsTextField.setEnabled(false);
        flatFileSettingsPanel.setEnabled(false);
        read();
    }//GEN-LAST:event_startSessionButtonActionPerformed

    private void debugSessionProcessingCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_debugSessionProcessingCheckBoxItemStateChanged
        Object source = evt.getItemSelectable();
        if (source == debugSessionProcessingCheckBox) {
            System.setProperty("arkade.session.debug", (evt.getStateChange() == evt.SELECTED) ? "true" : "false");
//            if (evt.getStateChange() == evt.SELECTED) {
//                NotifyDescriptor nd = new NotifyDescriptor.Message(
//                        NbBundle.getMessage(SessionTopComponent.class, "MSG_DebugSelected"),
//                        NotifyDescriptor.WARNING_MESSAGE);
//                Object retval = DialogDisplayer.getDefault().notify(nd);
//            }

        }
//        Object source = evt.getItemSelectable();
//        if (source == debugSessionProcessingCheckBox) {
//            System.setProperty("arkade.session.debug",
//                    debugSessionProcessingCheckBox.isSelected() ? "true" : "false");
//            if (debugSessionProcessingCheckBox.isSelected()) {
//                NotifyDescriptor nd = new NotifyDescriptor.Message(
//                        NbBundle.getMessage(SessionTopComponent.class, "MSG_DebugSelected"),
//                        NotifyDescriptor.WARNING_MESSAGE);
//                Object retval = DialogDisplayer.getDefault().notify(nd);
//            }
//
//        }
    }//GEN-LAST:event_debugSessionProcessingCheckBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseDataDirectoryButton;
    private javax.swing.JButton chooseDatasetDescriptionFileButton;
    private javax.swing.JButton chooseOutputDirectoryButton;
    private javax.swing.JLabel dataDirectoryLabel;
    private javax.swing.JTextField dataDirectoryTextField;
    private javax.swing.JLabel datasetDescriptionFileLabel;
    private javax.swing.JTextField datasetDescriptionFileTextField;
    private javax.swing.JCheckBox debugSessionProcessingCheckBox;
    private no.arkivverket.dataextracttools.arkade.modules.session.FlatFileSettingsPanel flatFileSettingsPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel maxNumberOfResultsLabel;
    private javax.swing.JTextField maxNumberOfResultsTextField;
    private javax.swing.JLabel outputDirectoryLabel;
    private javax.swing.JTextField outputDirectoryTextField;
    private javax.swing.JLabel sessionCreatorLabel;
    private javax.swing.JTextField sessionCreatorTextField;
    private javax.swing.JTabbedPane settingsTabbedPane;
    private javax.swing.JButton startSessionButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
    }

    @Override
    public boolean canClose() {
        // Can close if session is not running
        if (!isRunningSession()) {
            return true;
        } else {
            // Running. Abort?
            boolean canClose = false;
            NotifyDescriptor descriptor
                    = new NotifyDescriptor(
                            NbBundle.getMessage(SessionTopComponent.class,
                                    "MSG_CloseRunningSession",
                                    session.getName()),
                            "Arkade",
                            NotifyDescriptor.YES_NO_CANCEL_OPTION,
                            NotifyDescriptor.WARNING_MESSAGE,
                            SessionTopComponent.YES_NO_OPTIONS,
                            SessionTopComponent.YES_NO_OPTIONS[1]);
            Object notifyValue
                    = DialogDisplayer.getDefault().notify(descriptor);
            if (descriptor.getValue().equals(
                    SessionTopComponent.YES_NO_OPTIONS[0])) {
                // Yes
                // Can close session
                canClose = true;
            }
            return canClose;
        }
    }

    @Override
    public void componentClosed() {
        super.componentClosed();
        session.close();
        runningSession = false;
        SessionManager.getInstance().setCanCreateSession(true);
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();
        InputOutput sessionLog = IOProvider.getDefault().getIO(session.getName(), false);
        sessionLog.select();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void init() {
        session = SessionManager.getInstance().createSession("Arbeidsøkt");
        setName(session.getName());
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                InputOutput sessionLog = IOProvider.getDefault().getIO(session.getName(), false);
                Date date = new Date();
                sessionLog.getOut().println("Opprettet økt " + date.toString());
                sessionLog.getOut().println("Øktens id: " + session.getId());
            }
        });
        logger = Logger.getLogger(session.getId());
        LogRecordHandler logRecordHandler = new LogRecordHandler();
        logger.addHandler(logRecordHandler);
        logger.setUseParentHandlers(false);
        logger.setLevel(Level.ALL);
        logRecordHandler.addLogListener(this);
    }

    /**
     *
     * @return true if the session is running
     */
    public boolean isRunningSession() {
        return runningSession;
    }

    /**
     * Choose the directory with the data files
     */
    public void chooseDataDirectory() {
        File file;
        JFileChooser fileChooser = new JFileChooser(
                new java.io.File(defaultDirectory));
        fileChooser.setDialogTitle(NbBundle.getMessage(
                SessionTopComponent.class, "ChooseDataDirectory"));
        fileChooser.setFileSelectionMode(
                JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();

            dataDirectoryTextField.setText(file.getAbsolutePath());
            defaultDirectory = file.getPath();
        }
        enableStartButton();
    }

    /**
     * Choose the directory with the dataset description
     */
    public void chooseDatasetDescriptionFile() {
        JFileChooser fileChooser = new JFileChooser(
                new java.io.File(defaultDirectory));
        fileChooser.setDialogTitle(NbBundle.getMessage(
                SessionTopComponent.class, "ChooseDatasetDescriptionFile"));
        fileChooser.setFileSelectionMode(
                JFileChooser.FILES_AND_DIRECTORIES);
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter(
                "XML-filer", "xml");
        fileChooser.setFileFilter(fileFilter);
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            datasetDescriptionFile = fileChooser.getSelectedFile();

            datasetDescriptionFileTextField.setText(
                    datasetDescriptionFile.getAbsolutePath());
            defaultDirectory = datasetDescriptionFile.getPath();
        }
        enableStartButton();
    }

    /**
     * Choose the directory where the session report is stored, and where a
     * database can be placed
     */
    public void chooseOutputDirectory() {
        File file;
        JFileChooser fileChooser = new JFileChooser(
                new java.io.File(defaultDirectory));
        fileChooser.setDialogTitle(NbBundle.getMessage(
                SessionTopComponent.class, "ChooseOutputDirectory"));
        fileChooser.setFileSelectionMode(
                JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();

            outputDirectoryTextField.setText(file.getAbsolutePath());
            defaultDirectory = file.getPath();
        }
        enableStartButton();
    }

    private int getMaxNumberOfResults() {
        int maxNumberOfResults = Integer.MAX_VALUE;
        if (maxNumberOfResultsTextField.getText() != null
                && !maxNumberOfResultsTextField.getText().trim().equals("")) {
            maxNumberOfResults = Integer.parseInt(maxNumberOfResultsTextField.getText());
        }
        return maxNumberOfResults;
    }

    private void enableStartButton() {
        boolean enable = false;
        if (!("".equals(datasetDescriptionFileTextField.getText()))
                && !("".equals(dataDirectoryTextField.getText()))
                && !("".equals(outputDirectoryTextField.getText()))) {
            enable = true;
        }
        startSessionButton.setEnabled(enable);
    }

    private void read() {
        if (datasetDescriptionFile != null) {
            session.setDatasetDescriptionFile(datasetDescriptionFile);
            session.setSessionCreator(sessionCreatorTextField.getText());
            File dataDirectory = new File(dataDirectoryTextField.getText());
            File outputDirectory = new File(outputDirectoryTextField.getText());
            session.setDataDirectory(dataDirectory);
            session.setOutputDirectory(outputDirectory);
            session.setMaxNumberOfResults(getMaxNumberOfResults());
            session.setCreateFlatFileDatabase(flatFileSettingsPanel.isCreateDatabaseSelected());
            session.setCreateFlatFileDatabaseIndexes(flatFileSettingsPanel.isCreateDatabaseIndexesSelected());
            session.setFlatFileDatabaseNumberOfInsertsBeforeCommit(
                    flatFileSettingsPanel.getNumberOfInsertsBeforeCommit());
            session.setIgnoreProcesses(flatFileSettingsPanel.isIgnoreProcessesSelected());
            session.setDelimitedFilesHaveHeader(flatFileSettingsPanel.isDelimitedFilesHaveHeaderSelected());
            session.setAnalyseFlatFiles(flatFileSettingsPanel.isAnalyseFlatFilesSelected());
            session.setControlFlatFiles(flatFileSettingsPanel.isControlFlatFilesSelected());
            session.setControlKeys(flatFileSettingsPanel.isControlKeysSelected());
            session.setControlForeignKeys(flatFileSettingsPanel.isControlForeignKeysSelected());
            session.setAnalyseFields(flatFileSettingsPanel.isAnalyseFieldsSelected());
            session.setControlFields(flatFileSettingsPanel.isControlFieldsSelected());
            session.setControlUniqueness(flatFileSettingsPanel.isControlUniquenessSelected());
            (new SessionWorker(session)).execute();
        }
    }

//    @Override
//    public void propertyChange(PropertyChangeEvent evt) {
////        if (evt.getPropertyName().equals(TopComponent.getRegistry().PROP_TC_CLOSED)) {
////            if (evt.getNewValue() instanceof SessionTopComponent) {
////                ((SessionTopComponent) evt.getNewValue()).canClose();
////            }
////        }
//    }
    class SessionWorker extends SwingWorker<String, Object> {

        private final Session session;

        public SessionWorker(Session session) {
            this.session = session;
        }

        @Override
        protected String doInBackground() throws Exception {
            String resultString = "UNKNOWN";
            runningSession = true;
            int result = session.startSession();
            switch (result) {
                case Session.SUCCESS:
                    resultString = "SUCCESS";
                    break;
                case Session.FAILURE:
                    resultString = "FAILURE";
                    break;
                case Session.CAN_RESTART:
                    resultString = "CAN_RESTART";
                    break;
            }
            return resultString;
        }

        @Override
        protected void done() {
            try {
                String resultString = get();
                switch (resultString) {
                    case "SUCCESS":
                        startSessionButton.setText("Ferdig!");
                        logger.info("Arbeidsøkten er ferdig.");
                        SessionManager.getInstance().setCanCreateSession(true);
                        break;
                    case "FAILURE":
                        startSessionButton.setText("Ferdig!");
                        logger.severe(resultString);
                        SessionManager.getInstance().setCanCreateSession(true);
                        break;
                    case "CAN_RESTART":
                        startSessionButton.setText("Start");
                        sessionCreatorTextField.setEditable(true);
                        chooseDatasetDescriptionFileButton.setEnabled(true);
                        chooseDataDirectoryButton.setEnabled(true);
                        chooseOutputDirectoryButton.setEnabled(true);
                        maxNumberOfResultsTextField.setEnabled(true);
                        flatFileSettingsPanel.setEnabled(true);
                        startSessionButton.setEnabled(true);
                        logger.warning(resultString);
                        break;
                }
                runningSession = false;
            } catch (InterruptedException | ExecutionException ex) {
                Exceptions.printStackTrace(ex);
            } finally {
            }
        }
    }

    @Override
    public void logRecordCreated(final LogRecordCreatedEvent e) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                InputOutput sessionLog = IOProvider.getDefault().getIO(session.getName(), false);
                LogRecord logRecord = e.getLogRecord();

                // Level
                String logLevel = null;
                Level level = logRecord.getLevel();

                // Message
                StringBuilder message = new StringBuilder();
                if (logRecord.getMessage() != null) {
                    message.append(logRecord.getMessage());
                }
                if (level == Level.SEVERE) {
                    if (logRecord.getSourceClassName() != null) {
                        message.append(" - ").append(logRecord.getSourceClassName());
                    }
                    if (logRecord.getSourceMethodName() != null) {
                        message.append(" - ").append(logRecord.getSourceMethodName());
                    }
                }

                Color lineColor = Color.BLACK;
                if (level == Level.WARNING) {
                    lineColor = Color.BLUE;
                } else if (level == Level.SEVERE) {
                    lineColor = Color.RED;
                }
                try {
                    IOColorLines.println(sessionLog,
                            (logLevel != null ? logLevel : "") + message.toString(), lineColor);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
    }

    private class NumericalInput extends KeyAdapter {

        public NumericalInput() {
            super();
        }

        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!((Character.isDigit(c)
                    || (c == KeyEvent.VK_BACK_SPACE)
                    || (c == KeyEvent.VK_DELETE)))) {
                e.consume();
            }
        }

    }
}
